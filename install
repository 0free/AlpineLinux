#!/bin/bash

bootsize='199MiB'
swapfile='2048MiB' # '0' to disable
timezone='Asia/Muscat'
language=(ar_OM en_US)
keymap=(us us)
mirror='https://dl-cdn.alpinelinux.org/alpine'
arch='x86_64'
branch='edge'
version='2.12.9-r5'

packages_list() {

    PACKAGES+=(
        # micro-codes
        amd-ucode intel-ucode
        # desktop
        musl-locales
        xorg-server xdg-desktop-portal xf86-input-libinput eudev eudev-openrc
        elogind
        dbus dbus-openrc dbus-x11
        mesa mesa-dri-gallium
        # wayland
        xwayland
        # network
        ethtool rsync rsync-openrc
        # cpu
        cpupower cpupower-openrc
        # hardware
        bolt pciutils lm-sensors tpm2-tools
        # efi boot
        efibootmgr secureboot-hook kernel-hooks
        # base
        sudo bash bash-completion build-base fakeroot rsyslog rsyslog-openrc sed attr dialog which grep util-linux util-linux-openrc pciutils usbutils binutils findutils readline lsof less nano curl wget
        # gnu
        coreutils grep gawk findutils diffutils
        # bash
        bash bash-completion openrc-bash-completion ufw-bash-completion fwup-bash-completion ethtool-bash-completion dconf-bash-completion tpm2-tools-bash-completion code-oss-bash-completion
        # utilities
        openssl ncurses-dev
        # compression
        brotli zstd libzip zip git lz4 lzo unzip
        # disks
        e2fsprogs lvm2 os-prober gptfdisk dosfstools mtools ntfs-3g ntfs-3g-progs btrfs-progs xfsprogs hfsprogs exfatprogs f2fs-tools udftools sgdisk udisks2 mmc-utils jfsutils
        # firewall
        gufw ufw ufw-openrc ufw-bash-completion iptables iptables-openrc ipset ipset-openrc
        # wireless
        wireless-regdb wireless-tools iwd iwd-openrc
        # audio
        alsa-utils alsa-utils-openrc alsa-lib alsaconf alsa-ucm-conf
        pipewire pipewire-alsa pipewire-tools pipewire-pulse
        pipewire-spa-bluez pipewire-spa-vulkan easyeffects
        wireplumber
        sof-bin sof-firmware sof-tools
        # bluetooth
        bluez-alsa bluez-alsa-openrc bluez-alsa-utils
        # firmware
        fwupd fwupd-openrc fwupd-efi fwupd-plugin-bios fwupd-plugin-cpu fwupd-plugin-tpm fwupd-plugin-nvme fwupd-plugin-ata
        # trackpad
        xf86-input-synaptics xf86-input-mtrack
        # browser
        chromium-chromedriver
        # mesa
        mesa mesa-vulkan-layers
        # intel GPU
        xf86-video-intel mesa-vulkan-intel intel-media-driver
        # nvidia GPU
        nvidia-src
        # amd GPU
        xf86-video-amdgpu
    )

    if [[ $bootloaders == 'grub' ]]; then
        PACKAGES+=(
            grub-efi grub-bash-completion
        )
    fi

    if [[ $bootloaders == 'syslinux' ]]; then
        PACKAGES+=(
            syslinux
        )
    fi

    if grep -q btrfs /etc/fstab; then
        PACKAGES+=(
            btrfs-assistant
        )
        if [[ $bootloader == 'grub' ]]; then
            PACKAGES+=(
                grub-btrfs
            )
        fi
    fi

    if grep -q zfs /etc/fstab; then
        PACKAGE+=(
            zfs-lts zfs zfs-openrc zfs-libs
        )
    fi

    if [[ $desktop == 'gnome' ]]; then

        PACKAGES+=(
            # gnome session
            gdm gdm-openrc mutter xdg-desktop-portal-gtk xdg-desktop-portal-gnome gnome-desktop gnome-desktop-lang gnome-session gnome-shell-extensions gnome-shell-schemas gnome-control-center gnome-control-center-bash-completion gnome-tweaks gnome-menus chrome-gnome-shell gsettings-desktop-schemas udisks2-bash-completion tracker-bash-completion gpaste-gnome pinentry-gnome clutter clutter-gst clutter-gtk
            # gnome tools
            adwaita-icon-theme gnome-keyring gnome-console gnome-terminal gnome-disk-utility gnome-system-monitor file-roller
            # nautilus
            nautilus gnome-console-nautilus
            # text
            gedit gedit-plugins gnome-text-editor
            # firmware
            gnome-firmware-updater
            # gnome theme
            arc-theme arc-dark arc-dark-gnome papirus-icon-theme
            # gedit spell check
            aspell hspell hunspell nuspell libvoikko
            # network
            networkmanager networkmanager-openrc networkmanager-common networkmanager-bash-completion networkmanager-elogind networkmanager-wwan networkmanager-wifi networkmanager-bluetooth networkmanager-openvpn network-manager-applet networkmanager-initrd-generator
        )

    fi

    if [[ $desktop == 'kde' ]]; then

        PACKAGES+=(
            xdg-desktop-portal-kde sddm sddm-openrc sddm-kcm sddm-breeze plasma plasma-integration plasma-desktop plasma-workspace breeze kwin kinit kwayland kwayland-integration kdeplasma-addons kinfocenter kmenuedit dolphin dolphin-plugins konsole systemsettings kde-gtk-config discover kactivities kscreen kmenuedit bluedevil powerdevil kdecoration plasma-systemmonitor plasma-firewall plasma-pa plasma-nm
        )

    fi

    if [[ $desktop == 'kde-mobile' ]]; then
        packages+=(
            plasma-mobile plasma-settings plasma-camera plasma-dialer plasma-videoplayer plasma-mobile-sounds plasmatube audiotube koko angelfish calindori okular-mobile krecorder
        )
    fi

    if [[ $desktop == 'cinnamon' ]]; then

        PACKAGES+=(
            # cinnamon
            cinnamon-desktop arc-cinnamon arc-dark-cinnamon nemo font-manager-nemo
        )

    fi

    if [[ $computer == 'workstation' ]]; then

        if [[ $desktop == 'gnome' ]]; then
            packages+=(
                # gnome apps
                gnome-software gnome-software-plugin-apk gnome-software-plugin-flatpak gnome-photos gnome-music gnome-clocks gnome-contacts gnome-calculator gnome-maps gnome-logs gnome-remote-desktop gnome-screenshot gnome-boxes gnome-calendar gnome-sound-recorder gnome-font-viewer gnome-colors gnome-bluetooth gnome-podcasts gnome-characters gnome-builder gnome-shortwave getting-things-gnome sushi
                # web
                epiphany
                # documents
                evince evince-nautilus
                # photos
                gthumb eog shotwell
                # mail
                geary
                # sound
                gnome-metronome lollypop blanket
                # other
                glade ghex baobab confy
                # bluetooth
                blueman
            )
        fi

        if [[ $desktop == 'kde' ]]; then
            packages+=(
                 kate kile kwrite kcalc shelf plasma-phonebook knetattach plasma-browser-integration plasma-thunderbolt plasma-disks ark kfind kmix kmail kiconthemes kdenlive kmediaplayer ktexteditor ktorrent kdeconnect kamera kamoso okular spectacle partitionmanager akregator okteta kphotoalbum kmymoney cantor kdeedu-data minuet kdevelop materia-kde materia-kde-plasma materia-kde-kvantum kalk rocs calligra print-manager skanlite kalgebra marble kamoso spectacle elisa okteta haruna clip nota buho vvave index communicator isoimagewriter qrca nota kdesdk-thumbnailers knotes kget kompare falkon sweeper step kmousetool k3b
            )
        fi

        PACKAGES+=(
            # bash
            android-tools-bash-completion py3-pip-bash-completion npm-bash-completion git-bash-completion yt-dlp-bash-completion minify-bash-completion util-linux-bash-completion
            # shell
            starship
            # wine
            wine vkd3d
            # thumbnail
            ffmpegthumbnailer
            # mkimage
            abuild alpine-sdk apk-tools alpine-conf mkinitfs xorriso squashfs-tools
            # fonts tools
            font-manager font-viewer
            # fonts
            terminus-font ttf-inconsolata ttf-dejavu font-bitstream-* font-noto font-noto-cjk ttf-font-awesome font-arabic-misc font-noto-arabic font-noto-armenian font-noto-cherokee font-noto-devanagari font-noto-ethiopic font-noto-georgian tt-droid font-inter font-opensans ttf-freefont font-roboto font-roboto-mono font-roboto-flex
            # vulkan
            vulkan-headers vulkan-loader vulkan-validation-layers vulkan-tools
            # google
            google-authenticator
            # music
            amberol musescore
            # audio
            zrythm ardour tenacity calf calf-jack calf-lv2
            # video edit
            shotcut  pitivi x265
            # video subtitle
            gaupol
            # book
            foliate
            # openvc
            opencv py3-opencv
            # python
            black
            # JavaScript
            npm nodejs esbuild reason
            # code
            code-oss stylelint lapce codeblocks geany
            # code format
            prettier tidyhtml
            # html/css to pdf
            weasyprint
            # screenshot
            flameshot
            # electronic
            kicad
            # plan
            minder
            # screen
            obs-studio kooha peek
            # video
            mplayer totem celluloid
            # photos
            krita gimp inkscape gmic curtail
            # printer
            cups cups-openrc cups-pdf bluez-cups
            # driver
            xinput gkraken ccid solaar razercfg razercfg-gui razergenie
            # math
            geogebra sagemath mathjax2 octave
            # finance
            homebank kresus
            # youtube
            ffmpeg yt-dlp pipe-viewer-gtk
            # 2d
            tiled
            # 3d
            blender freecad godot leocad solvespace goxel
            # 3d printer
            cura
            # text editor
            kakoune
            # TypeScript
            typescript
            # tensorflow
            tensorflow tensorboard
            # mauikit
            mauikit mauikit-accounts mauikit-filebrowsing mauikit-imagetools mauikit-texteditor
            # bitcoin
            bitcoin bitcoin-openrc
            # game emu
            pcsx2 dolphin-emu xwiimote pcsxr
            # java
            jdk-openjdk
            # rust
            rust rustfmt rust-analysis cargo
            # go
            go
            # php
            composer php82 php82-bcmath php82-bz2 php82-cgi php82-curl php82-common php82-phpdbg php82-dom php82-exif php82-fileinfo php82-fpm php82-gd php82-gettext php82-iconv php82-intl php82-litespeed php82-mbstring php-memcache php-memcached php82-mysqli php82-mysqlnd php82-opcache php82-phar php82-pear php-redis php82-session php82-snmp php82-soap php82-xml php82-zip
            # android
            android-udev android-tools android-file-transfer gvfs-mtp scrcpy
            # iPhone/iPod/mac
            ifuse mbpfan ideviceinstaller idevicerestore libirecovery libideviceactivation libimobiledevice
            # dependencies
            intltool
            # icons
            colloid-icon-theme moka-icon-theme numix-icon-theme
            # system restore
            timeshift
            # pdf
            acroread pdfstudioviewer pdfarranger
            # meetings
            teams zoom
            # drives
            onedrive
            # social
            whatsapp-for-linux whatsie walc cawbird
            # wireless drivers
            rtl8814au-aircrack-dkms
            # Corsair
            ckb-next
            # RGB
            openrgb
            # screen
            green-recorder wayfarer
            # plan
            planner xmind
            # media player
            clapper
            # music player
            nuclear-player amberol sublime-music
            # music server
            navidrome
            # video edit
            davinci-resolve video-trimmer lightworks
            # youtube
            freetube youtube-music youtube-viewer-gtk
            # download
            video-downloader 4kyoutubetomp3 4kvideodownloader 4ktokkit 4kstogram
            # media
            plex-desktop
            # mail
            rambox
            # android
            android-studio android-sdk android-sdk-platform-tools gradle
            # code
            flutter swift codelite phpstorm webstorm webstorm-eap
            # web
            parcel-bundler
            # JavaScript
            flow runjs
            # javascript/css
            minify
            # database
            dbgate
            # system
            system-monitoring-center whatpulse
            # photos
            metadata-cleaner lunacy annotator fastflix darktable
            # drawing
            figma-linux drawing
            # 3d
            f3d blockbench
            # USB driver
            asekey
            # math
            wxmaxima
            # edu
            openboard lean4
            # finance
            portfolio-performance
            # diagram
            drawio-desktop
            # stock
            jstock
            # nintendo
            yuzu-mainline
            # remote
            anydesk remmina
            # gaming
            legendary
            # touch
            touchegg
            # transtation
            go-translation
            # nvidia optimus
            optimus-manager envycontrol
            # CPU
            corectrl
            # http
            hetty
            # netgear
            nmrpflash
            # bandwidth
            peer2profit
            # cctv
            zoneminder
            # iso
            thumbdrives
        )

    fi

    if [[ $computer == 'server' ]]; then

        PACKAGES+=(
            # system
            rsyslog rsyslog-openrc rsyslog-mysql rsyslog-tls rsyslog-http
            # SSL/TLS
            certbot
            # php 8.1.7
            php81 php81-bcmath php81-brotli php81-bz2 php81-cgi php81-curl php81-common php81-phpdbg php81-dom php81-exif php81-fileinfo php81-fpm php81-gd php81-gettext php81-iconv php81-intl php81-litespeed php81-mbstring php81-memcache php81-memcached php81-mysqli php81-mysqlnd php81-opcache php81-openssl php81-phar php81-pear php81-redis php81-session php81-snmp php81-soap php81-xml php81-zip php81-pecl-imagick
            # php admin
            phpmyadmin
            # database
            mariadb
            # mail
            postfix postfix-openrc postfix-mysql postfix-pcre postfixadmin
            dovecot dovecot-openrc dovecot-submissiond dovecot-lmtpd dovecot-pop3d dovecot-sql dovecot-mysql
            opendkim opendkim-utils
            cyrus-sasl
            # tools
            imagemagick redis redis-openrc memcached memcached-openrc
            # server
            litespeed litespeed-openrc
            # http
            hetty
            # cab
            cabextract
        )

    fi

    if [[ $computer == 'miner' ]]; then
        PACKAGE+=(
            # miner
            trex gminer lolminer phoenixminer teamredminer
        )
    fi

}

menu() {

    echo -e "\n --> $1:\n"
    output=$2
    shift 2
    options=($@)
    i=0
    while true; do
        for option in ${options[@]}; do
            if [[ $option == ${options[$i]} ]]; then
                echo -e "\t\e[7m$option\e[0m"
            else
                echo -e "\t$option"
            fi
        done
        read -sn3 key
        if [[ $key == $(echo -en "\e[A") ]] && [[ $i -gt 0 ]]; then
            i=$(($i-1))
        elif [[ $key == $(echo -en "\e[B") ]] && [[ $i -lt ${#options[@]} ]]; then
            i=$(($i+1))
        elif [[ -z $key ]]; then
            break
        fi
        echo -en "\e[${#options[@]}A"
    done
    printf -v $output "${options[$i]}"

}

setup_drive() {

    echo '# created by Saif AlSubhi'
    printf -- '-%.0s' {1..100}; echo ''
    lsblk -o name,size,fstype,mountpoint,label,model
    printf -- '-%.0s' {1..100}; echo ''

    drives=($(ls /dev/ | grep '^nvme.\{3\}$\|^sd.\{1\}$'))

    for i in ${!drives[@]}; do
        drives[$i]="/dev/${drives[$i]}"
    done

    menu 'select a drive' drive ${drives[@]}

    if ls $drive* | grep "$drive.\{1\}$"; then
        partitions=($(ls $drive*))
        menu 'select a root partition or use the complete drive ' partition ${partitions[@]}
        if [[ $drive != $partition ]] ; then
            root_drive=$partition
            partitions=($(ls $drive* | grep -v $drive | grep -v $partition | grep "$drive.\{1\}$"))
            menu 'select a boot partition to mount ' partition ${partitions[@]}
            boot_drive=$partition
        fi
    fi

    filesystems=(zfs btrfs ext4 exfat ntfs xfs)
    menu 'select a filesystem' filesystem ${filesystems[@]}

    computers=(workstation minimal miner server)
    menu 'select a computer' computer ${computers[@]}

    desktops=(gnome kde kde-mobile cinnamon)
    menu 'select a desktop' desktop ${desktops[@]}

    bootloaders=(grub syslinux)
    menu 'select a desktop' bootloader ${bootloaders[@]}

    if ! test sgdisk; then
        echo ">>> installing sgdisk"
        apk add sgdisk
    fi

    if [[ ! $root_drive ]]; then
        echo ">>> wiping filesystm"
        wipefs -a -f $drive
        echo ">>> deleting partitions"
        sgdisk -Z $drive
        echo ">>> creating GPT"
        sgdisk -U $drive
        echo ">>> creating boot partition"
        sgdisk -n 0:0:+$bootsize -c 0:EFI -t 0:ef00 $drive
        echo ">>> creating root partition"
        if [[ $filesystem == 'zfs' ]]; then
            sgdisk -n 0:0:0 -c 0:ZFS -t 0:bf00 $drive
        else
            sgdisk -n 0:0:0 -c 0:LINUX -t 0:8300 $drive
        fi
        boot_drive=$drive"1"
        root_drive=$drive"2"
        echo ">>> reading partition tables"
        mdev -s && sleep 1
        echo ">>> creating boot filesystem"
        mkfs.vfat -F32 -n BOOT $boot_drive
    fi

    echo ">>> creating root filesystem"
    if [[ $filesystem == 'zfs' ]]; then
        create_zfs
    elif [[ $filesystem == 'btrfs' ]]; then
        mkfs.btrfs -f -L ROOT $root_drive
    elif [[ $filesystem == 'ext4' ]]; then
        mkfs.ext4 -f -L ROOT $root_drive
    elif [[ $filesystem == 'exfat' ]]; then
        mkfs.exfat -f -L ROOT $root_drive
    elif [[ $filesystem == 'ntfs' ]]; then
        mkfs.ntfs -f -C -L ROOT $root_drive
    elif [[ $filesystem == 'xfs' ]]; then
        mkfs.xfs -f -L ROOT $root_drive
    fi

    mount_root
    mount_boot

    if [[ $filesystem == 'zfs' ]]; then
        set_zfs
    fi

    install_base

}

create_zfs() {

    echo ">>> loading ZFS modules"
    /sbin/modprobe zfs
    echo ">>> checking ZFS modules"
    if ! lsmod | grep -qi zfs; then
       echo 'ERROR: ZFS modules are missing'
       create_rootfs
    fi
    echo ">>> creating ZFS pool"
    zpool create -f -o ashift=12 -o autotrim=on -O recordsize=8192 \
    -O compression=lz4 -O acltype=posixacl \
    -O devices=off -O xattr=sa -O relatime=off -O atime=off \
    -O dnodesize=auto -O normalization=formD \
    -O canmount=off -O mountpoint=/ -R /mnt rpool $root_drive
    echo ">>> checking ZFS pool"
    zpool status

}

mount_root() {

    if [[ $filesystem != 'zfs' ]]; then
        echo ">>> mounting root drive"
        mount $root_drive /mnt
    fi

    if [[ ! -d /mnt/boot ]]; then
        mkdir -p /mnt/boot
    fi
    if [[ ! -d /mnt/boot/EFI ]]; then
        mkdir -p /mnt/boot/EFI
    fi

}

mount_boot() {

    echo ">>> mounting boot drive"
    mount $boot_drive /mnt/boot

}

set_zfs() {

    echo ">>> setting ZFS pool as rootfs"
    zpool set bootfs=rpool/ rpool
    echo ">>> setting ZFS cache"
    zpool set cachefile=/etc/zfs/zpool.cache rpool
    mkdir -p /mnt/etc/zfs
    cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache
    echo ">>> adding ZFS options"
    mkdir -p /mnt/etc/modprobe.d/
    echo "options scsi_mod scan=sync" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs l2arc_noprefetch=0" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs l2arc_write_max=536870912" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs l2arc_write_boost=1073741824" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs l2arc_headroom=12" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_arc_max=536870912" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_arc_min=268435456" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_prefetch_disable=0" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_top_maxinflight=320" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_txg_timeout=15" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_scheduler=deadline" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_read_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_read_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_write_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_write_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_write_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_write_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_read_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_read_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf

}

update_packages() {

    echo ">>> updating packages"

    echo "$mirror/$branch/main" > /etc/apk/repositories
    echo "$mirror/$branch/community" >> /etc/apk/repositories
    echo "$mirror/$branch/testing" >> /etc/apk/repositories

}

install_base() {

    update_packages

    echo ">>> installing alpine-base"
    apk add --root=/mnt --initdb alpine-base --keys-dir /etc/apk/keys --repositories-file /etc/apk/repositories

    if [[ -f /mnt/etc/fstab ]]; then
        echo ">>> deleting fstab"
        rm /mnt/etc/fstab
    fi

    echo ">>> copying repositories"
    cp /etc/apk/repositories /mnt/etc/apk/repositories

    echo ">>> adding name resolution"
    echo 'nameserver 1.0.0.1' >> /mnt/etc/resolv.conf
    echo 'nameserver 8.8.8.8' >> /mnt/etc/resolv.conf

    echo ">>> installing tools"
    apk add --root=/mnt sudo bash bash-completion

    echo ">>> installing network packages"
    apk add --root=/mnt networkmanager iwd

    echo ">>> installing compression packages"
    apk add --root=/mnt zstd lzo lz4

    install_linux

    echo ">>> packages list"
    packages_list

    install_packages

    set_fstab

}

install_linux() {

    if grep -q zfs /etc/fstab; then
        list=' linux-lts'
    else
        list=' linux-edge'
    fi
    list+=' linux-firmware-intel linux-firmware-i915'
    list+=' linux-firmware-amd linux-firmware-amd-ucode'
    list+=' linux-firmware-nvidia'
    list+=' linux-firmware-amdgpu'
    list+=' linux-firmware-other'
    list+=' linux-firmware-rtlwifi linux-firmware-rtl_bt linux-firmware-rtl_nic'
    echo ">>> installing linux"
    apk add --root=/mnt $list

}

install_packages() {

    list=''
    for i in ${!PACKAGES[@]}; do
        list+=' '
        list+=${PACKAGES[$i]}
    done
    echo ">>> installing packages"
    apk add --root=/mnt $list

}

set_fstab() {

    echo ">>> setting fstab"

    uuid=$(lsblk -dno UUID $root_drive)
    echo $uuid > /mnt/root/chroot

    if [[ $filesystem == 'zfs' ]]; then
        echo "#UUID=$uuid / $filesystem ssd 0 0" >> /mnt/etc/fstab
    else
        echo "UUID=$uuid / $filesystem ssd,nofail,rw,discard,noatime,commit=64,autodefrag,compress=zstd:10 0 0" >> /mnt/etc/fstab
    fi

    uuid=$(lsblk -dno UUID $boot_drive)
    echo "UUID=$uuid /boot vfat ssd,rw,discard,noatime 0 0" >> /mnt/etc/fstab

    echo "/EFI /boot none ssd,rw,discard,noatime,bind 0 0" >> /mnt/etc/fstab

    echo $drive > /mnt/root/drive
    echo $computer > /mnt/root/computer
    echo $desktop > /mnt/root/desktop
    echo $bootloader > /mnt/root/bootloader
    change_root

}

change_root() {

    if [[ -f install ]]; then
        echo ">>> moving install script"
        mv install /mnt/root/install
    fi

    echo ">>> changing root"
    mount --bind /dev /mnt/dev
    mount --bind /sys /mnt/sys
    chroot /mnt /bin/bash /root/install

}

configure() {

    set_host
    create_user
    disable_root
    set_locale
    setup_desktop

}

set_host() {

    echo ">>> setting hostname"
    read -p " --> hostname: " HOSTNAME
    echo "$HOSTNAME" > /etc/hostname

    echo "127.0.0.1 localhost localhost.localdomain $hostname.localdomain $hostname" > /etc/hosts
    echo "::1       localhost localhost.localdomain $hostname.localdomain $hostname" >> /etc/hosts

}

set_timezone() {

    echo ">>> setting timezone"
    apk add tzdata
    if [[ -f /usr/share/zoneinfo/$timezone ]]; then
        install -Dm 0644 /usr/share/zoneinfo/$timezone /etc/localtime
        echo $timezone > /etc/timezone
    else
        read -p " --- timezone Asia/Muscat: " timezone
        set_timezone
    fi
    apk del tzdata

}

create_user() {

    echo ">>> creating user"
    read -p " --> username: " USER

    if id $USER &>/dev/null; then
        userdel $USER
    fi

    echo "%$USER ALL=(ALL) ALL" > /etc/sudoers.d/$USER
    chmod 0400 /etc/sudoers.d/$USER
    adduser -h /home/$USER -s /bin/bash -g $USER $USER
    adduser $USER video
    adduser $USER audio
    adduser $USER input

    echo ">>> setting user password"
    read -sp " --> $USER password: " user_password && echo ''
    read -sp " --> $USER password (confirm): " check && echo ''
    if [[ $user_password != $check ]]; then
        echo "ERROR: password did not match"
        set_user_password
    fi
    echo -en "$user_password\n$user_password" | passwd $USER

}

disable_root() {

    echo ">>> disabling root"
    passwd -l root

}

set_locale() {

    echo ">>> setting locale"
    setup-keymap 'us'

    if [[ ! $language ]]; then
        read -p " --- language en_US: " language
        set_locale
    fi
    for lang in ${language[@]}; do
        if grep -qi $lang /etc/locale.gen; then
            sed -i "s/^#$lang.UTF-8/$lang.UTF-8/" /etc/locale.gen
        fi
    done

    sed -i 's|#unicode="NO"|unicode="YES"|' /etc/rc.conf

}

setup_desktop() {

    enable_services

    configure_alpine

    if ! grep -qEw "custom commands" "/home/$USER/.bashrc"; then
        add_commands
    fi

    if [[ $swapfile != '0' ]]; then
        create_swap_file
    fi

    install_syslinux

    if [[ $bootloader == 'grub' ]]; then
        install_grub
    fi

    install_mkinitfs

    finish

}

enable_services() {

    echo ">>> enabling services"

    rc-update add networkmanager default
    rc-update add iwd default
    rc-update add udev default
    rc-update add dbus default
    rc-update add elogind default
    rc-update add alsa default
    rc-update add bluetooth default
    rc-update add iptables default
    rc-update add ipset default

    if [[ $swapfile != '0' ]]; then
        rc-update add swap default
    fi

    if [[ $desktop == 'gnome' ]]; then
        rc-update add gdm default
    fi

    if [[ $desktop == 'kde' ]]; then
        rc-update add sddm default
    fi

    if [[ $computer == 'workstation' ]]; then
        rc-update add cups default
    fi

    if [[ $computer == 'server' ]]; then
        rc-update add mariadb default
        rc-update add mysql default
        rc-update add mysqld default
        rc-update add lshttpd default
        rc-update add postfix default
        rc-update add dovecot default
        rc-update add opendkim default
        mkdir /var/mysql && chown -R mysql:mysql /var/mysql
        mkdir /var/log/mysql && chown -R mysql:mysql /var/log/mysql
    fi

    if grep -q zfs /etc/fstab; then
        echo ">>> enabling ZFS services"
        rc-update add zfs-import sysinit
        rc-update add zfs-mount sysinit
    fi

}

configure_alpine() {

    echo ">>> configuring alpine"
    if [ ! -d /etc/pipewire ]; then
        mkdir /etc/pipewire
    fi
    cp /usr/share/pipewire/pipewire.conf /etc/pipewire/
    echo '{ path = "wireplumber"  args = "" }' > /etc/pipewire/pipewire.conf
    /sbin/modprobe snd_seq
    echo snd_seq >> /etc/modules

}

add_commands() {

    if [[ $computer == 'workstation' ]]; then
        echo "eval $(starship init bash)" >> /home/$USER/.bashrc
    fi

    echo ">>> adding bashrc"
    echo "# custom commands" >> /home/$USER/.bashrc
    echo "alias search='sudo apk search'" >> /home/$USER/.bashrc
    echo "alias install='sudo apk add'" >> /home/$USER/.bashrc
    echo "alias update='sudo apk update && sudo apk upgrade'" >> /home/$USER/.bashrc
    echo "alias remove='sudo apk del'" >> /home/$USER/.bashrc
    echo "alias c='clear'" >> /home/$USER/.bashrc
    echo "alias edit='SUDO_EDITOR=gedit sudoedit'" >> /home/$USER/.bashrc
    echo "alias service='sudo rc-service'" >> /home/$USER/.bashrc

    echo "alias fwupd='fwupdmgr get-devices && fwupdmgr refresh && fwupdmgr get-updates && fwupdmgr update'" >> /home/$USER/.bashrc

    echo "alias youtube='yt-dlp -o \"~/%(title)s.%(ext)s\" -f \"bv[vcodec~=\"^((he|a)vc|h26[45])\"][height<=1080][fps<=60]+ba\" --merge-output-format mp4 --downloader ffmpeg --external-downloader ffmpeg --external-downloader-args ffmpeg:\"-ss 00:00:00 -to 00:00:00\"'" >> /home/$USER/.bashrc

}

create_swap_file() {

    echo ">>> creating swap file"

    udevadm trigger
    mount -t proc proc /proc

    if grep -q zfs /etc/fstab; then
        if ! zfs get volsize rpool/swap; then
            zfs create -V $swapfile -b 8192 -o compression=zle \
            -o logbias=throughput -o sync=always -o primarycache=metadata \
            -o com.sun:auto-snapshot=false rpool/swap
            mkswap /dev/zvol/rpool/swap
            swapon /dev/zvol/rpool/swap
        fi
    else
        if [[ ! -f /swapfile ]]; then
            dd if=/dev/zero of=/swapfile bs=1M count=$swapfile status=progress
        fi
        chmod 0600 /swapfile
        mkswap /swapfile
        swapon /swapfile
    fi

    if ! grep -q swap /etc/fstab; then
        if grep -q zfs /etc/fstab; then
            echo -e '/dev/zvol/rpool/swap none swap discard 0 0' >> /etc/fstab
        else
            echo -e '/swapfile none swap sw 0 0' >> /etc/fstab
        fi
    fi

}

install_syslinux() {

    echo ">>> installing syslinux"
    dd bs=440 count=1 conv=notrunc if=/usr/share/syslinux/gptmbr.bin of=$drive
    mkdir -p /boot/extlinux/
    extlinux --install /boot/extlinux/

}

install_grub() {

    echo ">>> installing grub bootloader"
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id="Alpine Linux"

    if grep -q zfs /etc/fstab; then
        echo 'export ZPOOL_VDEV_NAME_PATH=YES' >> /etc/profile.d/zpool_vdev_name_path.sh
        source /etc/profile.d/zpool_vdev_name_path.sh
        echo 'Defaults env_keep += "ZPOOL_VDEV_NAME_PATH"' >> /etc/sudoer
        sed -i "s|rpool=.*|rpool=\`zdb -l \${GRUB_DEVICE} \| grep -E '[[:blank:]]name' \| cut -d\\\' -f 2\`|" /etc/grub.d/10_linux
        echo "GRUB_CMDLINE_LINUX=\"modules=nvme,sd-mod,usb-storage,ext4 quit\"" >> /etc/default/grub
        echo "GRUB_PRELOAD_MODULES=\"usb usb_keyboard part_gpt nvme zfs zfscrypt zfsinfo\"" >> /etc/default/grub
    else
        echo "GRUB_PRELOAD_MODULES=\"usb usb_keyboard part_gpt nvme\"" >> /etc/default/grub
    fi

    if [[ ! -d /boot/grub/themes ]]; then
        mkdir /boot/grub/themes
    fi

    if [[ ! -d /boot/grub/themes/grub-theme ]]; then
        echo ">>> cloning grub-theme"
        cd /boot/grub/themes/
        git clone https://github.com/0free/grub-theme.git
        cd /root
    fi

    sed -i 's/GRUB_TIMEOUT=2/GRUB_TIMEOUT=1/' /etc/default/grub
    echo "GRUB_THEME=\"/boot/grub/themes/grub-theme/background.png\"" >> /etc/default/grub
    echo "GRUB_THEME=\"/boot/grub/themes/grub-theme/theme.txt\"" >> /etc/default/grub
    echo "GRUB_SAVEDEFAULT=true" >> /etc/default/grub
    echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
    echo "loglevel=0" >> /etc/default/grub

    echo ">>> making grub config"
    grub-mkconfig -o /boot/grub/grub.cfg

}

install_mkinitfs() {

    echo ">>> installing mkinitfs"

    modules=(base nvme ata usb keyboard)
    modules+=(usbhid xhci_hcd)
    modules+=(i915 intel_agp)
    modules+=(amdgpu)
    modules+=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)

    if grep -q btrfs /etc/fstab; then
        modules+=(btrfs)
    fi

    if grep -q zfs /etc/fstab; then
        modules+=(zfs)
    fi

    if grep -q ext4 /etc/fstab; then
        modules+=(ext4)
    fi

    list=''
    for i in ${!modules[@]}; do
        list+=${modules[$i]}
        list+=' '
    done

    echo ">>> configuring mkinitfs"
    echo "features=\"$list\"" > /etc/mkinitfs/mkinitfs.conf

    echo ">>> building initial ramdisk"
    mkinitfs -c /etc/mkinitfs/mkinitfs.conf

}

finish() {

    echo ">>> un-mount & reboot"
    swapoff -a
    umount /mnt/dev
    umount /mnt/sys
    umount -R /mnt
    if grep -q zfs /etc/fstab; then
        zfs umount -a
        zpool export rpool
    fi
    reboot

}

clear && set -e

if [[ -f /root/chroot ]]; then
    uuid=$(cat /root/chroot)
    drive=$(cat /root/drive)
    computer=$(cat /root/computer)
    desktop=$(cat /root/desktop)
    bootloader=$(cat /root/bootloader)
    if [ $(find /home -maxdepth 1 -type d | wc -l) -ne 1 ]; then
        USER=$(ls /home)
        if [[ -f /root/desktop ]]; then
            setup_desktop
        else
            install_syslinux
            if [[ $bootloader == 'grub' ]]; then
                install_grub
            fi
        fi
    else
        configure
    fi
else
    if mountpoint -q /mnt; then
        if [[ -f /mnt/etc/fstab ]]; then
            change_root
        else
            install_base
        fi
    else
        setup_drive
    fi
fi

#end
